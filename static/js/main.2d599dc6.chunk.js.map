{"version":3,"sources":["components/card/Card.js","components/cardList/CardList.js","components/searchBox/SearchBox.js","components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","a","fetch","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAceA,EAVF,SAACC,GACb,OACC,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCUNC,EAdE,SAACR,GAGjB,OAFAS,QAAQC,IAAIV,GAGX,8BACC,qBAAKC,UAAU,YAAf,SACED,EAAMW,SAASC,KAAI,SAACR,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCCTQ,G,MARG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACjC,OACC,8BACC,uBAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,QC8BhEG,E,4MA7BbC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,EASfL,aAAe,SAACM,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,8FAPxC,8BAAAC,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEC,KAAKP,SAAS,CAAEX,SAAUiB,IAH5B,gD,0EAUA,WAAU,IAAD,OAEP,EAAkCC,KAAKV,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZU,EAAmBnB,EAASoB,QAAO,SAAC3B,GAAD,OAAaA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBACtG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAc,SAACM,GAAD,OAAO,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,WACpG,cAAC,EAAD,CAAUb,SAAUmB,W,GAxBVI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d599dc6.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Card.css'\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className='card-container'>\n\t\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n\t\t\t<h2>{props.monster.name}</h2>\n\t\t\t<p>{props.monster.email}</p>\n\t\t</div>\n\t)\n}\n\nexport default Card\n\n// we are passing monster into the Card component, and the Card component gets it from the props and displays the name.\n","import React from 'react'\n\nimport './CardList.css'\nimport Card from '../card/Card'\n\nconst CardList = (props) => {\n\tconsole.log(props)\n\n\treturn (\n\t\t<div>\n\t\t\t<div className='card-list'>\n\t\t\t\t{props.monsters.map((monster) => (\n\t\t\t\t\t<Card key={monster.id} monster={monster} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default CardList\n\n// props monsters from App, then code to generate the list, so instead of being off state, if off props\n// CardList is generating the list\n","import React from 'react'\n\nimport './SearchBox.css'\n\n// props coming in include placeholder\nconst SearchBox = ({ placeholder, handleChange }) => {\n\treturn (\n\t\t<div>\n\t\t\t<input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n\t\t</div>\n\t)\n}\n\nexport default SearchBox\n\n/*\n\nwhy the handle change function, simply pass the parent's setState callback to child's onClick callback\n\nthe reason is, when there is onClick event occur in child component, we want to setState(render something different) in parent component\n\nsince child cannot setState parent component, so we need to pass down parent component setState for child to utilize it\n*/\n","import React, { Component } from 'react'\n\nimport './App.css'\n\nimport CardList from './cardList/CardList'\nimport SearchBox from './searchBox/SearchBox'\n\n// initial state is an empty array\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: ''\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users')\n    const json = await response.json()\n    this.setState({ monsters: json })\n  }\n  // going to pass in monsters as a prop from our App, to CardList\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    // filter our monsters by creating a new [] in render, thus leaving orginal [] intact, start with destructuring\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={(e) => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n// we are going to wait for our component to mount, then fetch all our users, than update our state 'monsters' with the new [] of users.\n// taking the response and converting it into the json format that js can understand and use.\n/*\n<input\n\t\t\t\t\ttype='search'\n\t\t\t\t\tplaceholder='search monsters'\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t{ searchField: e.target.value },\n\t\t\t\t\t\t\t//callback, runs after async setState has completed, ie updated state\n\t\t\t\t\t\t\t() => console.log(this.state)\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n//import 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}